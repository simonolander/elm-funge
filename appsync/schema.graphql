enum InstructionTag {
    NoOp
    ChangeDirection
    PushToStack
    PopFromStack
    JumpForward
    Duplicate
    Swap
    Negate
    Abs
    Not
    Increment
    Decrement
    Add
    Subtract
    Multiply
    Divide
    Equals
    CompareLessThan
    And
    Or
    XOr
    Read
    Print
    Branch
    Terminate
    SendToBottom
    Exception
}

enum Direction {
    Left
    Up
    Right
    Down
}

interface Instruction {
    id: Int!
    tag: InstructionTag!
}

type GeneralInstruction implements Instruction {
    id: Int!
    tag: InstructionTag!
}

type ChangeDirectionInstruction implements Instruction {
    id: Int!
    tag: InstructionTag!
    direction: Direction!
}

type PushToStackInstruction implements Instruction {
    id: Int!
    tag: InstructionTag!
    value: Int!
}

type BranchInstruction implements Instruction {
    id: Int!
    tag: InstructionTag!
    trueDirection: Direction!
    falseDirection: Direction!
}

type ExceptionInstruction implements Instruction {
    id: Int!
    tag: InstructionTag!
    exceptionMessage: String!
}

type IO {
    input: [Int!]!
    output: [Int!]!
}

enum InstructionToolTag {
    JustInstruction
    ChangeAnyDirection
    BranchAnyDirection
    PushValueToStack
}

interface InstructionTool {
    id: Int!
    tag: InstructionToolTag! 
}

type GeneralInstructionTool implements InstructionTool {
    id: Int!
    tag: InstructionToolTag! 
}

type JustInstructionInstructionTool implements InstructionTool {
    id: Int!
    tag: InstructionToolTag!
    instruction: Instruction!
}

type BoardInstruction {
    x: Int!
    y: Int!
    instruction: Instruction!
}

type Board {
    version: Int!
    id: Int!
    width: Int!
    height: Int!
    instructions: [BoardInstruction!]!
}

type Level {
    id: String!
    external_id: String!
    name: String!
    description: [String!]!
    io: IO!
    initialBoard: Board!
    instructionTools: [InstructionTool!]!
}

type LevelSolution {
    id: String!
    level: Level!
    board: Board!
    solver: User!
    number_of_steps: Int!
    number_of_instructions: Int!
    area: Int!
    created_time: Int!
}

type User {
    id: Int! 
    username: String!
    levelSolutions: [LevelSolution!]!
    authoredLevels: [Level!]!
}

type Query {
    listLevels: [Level!]!
    getLevel(id: ID!): Level
    getUserByUsername(username: String!): User
}

type Mutation {
    createUser(username: String!): User!
    createLevelSolution(input: CreateLevelSolutionInput!): LevelSolution!
}

input CreateLevelSolutionInput {
    username: String!
    levelId: Int!
    board: String!
}

schema {
    query: Query
    mutation: Mutation
}