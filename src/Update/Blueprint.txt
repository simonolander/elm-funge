module Update.Blueprint exposing
    ( deleteBlueprint
    , getBlueprintByBlueprintId
    , gotDeleteBlueprintResponse
    , gotLoadBlueprintResponse
    , gotLoadBlueprintsResponse
    , gotSaveBlueprintResponse
    , loadBlueprintByBlueprintId
    , loadBlueprints
    , loadBlueprintsByBlueprintIds
    , saveBlueprint
    )

-- LOAD


loadBlueprintByBlueprintId : BlueprintId -> CmdUpdater Session SessionMsg
loadBlueprintByBlueprintId blueprintId session =
    case VerifiedAccessToken.getValid session.accessToken of
        Just accessToken ->
            case Cache.get blueprintId session.blueprints.actual of
                NotAsked ->
                    ( RemoteCache.withActualLoading blueprintId session.blueprints
                        |> flip Session.withBlueprintCache session
                    , Blueprint.loadFromServerByBlueprintId GotLoadBlueprintResponse accessToken blueprintId
                    )

                _ ->
                    ( session, Cmd.none )

        Nothing ->
            ( session, Cmd.none )


getBlueprintByBlueprintId : BlueprintId -> Session -> RemoteData GetError (Maybe Blueprint)
getBlueprintByBlueprintId blueprintId session =
    todo ""


loadBlueprints : CmdUpdater Session SessionMsg
loadBlueprints session =
    case session.actualBlueprintsRequest of
        NotAsked ->
            case VerifiedAccessToken.getValid session.accessToken of
                Just accessToken ->
                    ( { session | actualBlueprintsRequest = Loading }
                    , Blueprint.loadAllFromServer GotLoadBlueprintsResponse accessToken
                    )

                Nothing ->
                    ( session, Cmd.none )

        _ ->
            ( session, Cmd.none )


loadBlueprintsByBlueprintIds : List BlueprintId -> CmdUpdater Session SessionMsg
loadBlueprintsByBlueprintIds blueprintIds =
    CmdUpdater.batch (List.map loadBlueprintByBlueprintId blueprintIds)


gotLoadBlueprintResponse : BlueprintId -> Result GetError (Maybe Blueprint) -> CmdUpdater Session SessionMsg
gotLoadBlueprintResponse blueprintId result session =
    case result of
        Ok maybeBlueprint ->
            gotActualBlueprint blueprintId maybeBlueprint session

        Err error ->
            let
                sessionWithActualBlueprintResult =
                    { session | blueprints = RemoteCache.withActualResult blueprintId result session.blueprints }
            in
            gotGetError error sessionWithActualBlueprintResult


gotLoadBlueprintsResponse : Result GetError (List Blueprint) -> CmdUpdater Session SessionMsg
gotLoadBlueprintsResponse result session =
    let
        sessionWithBlueprintResponse =
            { session | actualBlueprintsRequest = RemoteData.fromResult (Result.map (always ()) result) }
    in
    case result of
        Ok blueprints ->
            List.map (fanout .id Just) blueprints
                |> List.map (uncurry gotActualBlueprint)
                |> flip CmdUpdater.batch sessionWithBlueprintResponse

        Err error ->
            gotGetError error sessionWithBlueprintResponse


gotActualBlueprint : BlueprintId -> Maybe Blueprint -> CmdUpdater Session SessionMsg
gotActualBlueprint blueprintId maybeActualBlueprint oldSession =
    let
        sessionWithActualBlueprint =
            { oldSession | blueprints = RemoteCache.withActualValue blueprintId maybeActualBlueprint oldSession.blueprints }

        maybeLocalBlueprint =
            Dict.get blueprintId sessionWithActualBlueprint.blueprints.local

        maybeExpectedBlueprint =
            Dict.get blueprintId sessionWithActualBlueprint.blueprints.expected

        overwriteLocal maybeBlueprint session =
            ( { session | blueprints = RemoteCache.withLocalValue blueprintId maybeBlueprint session.blueprints }
            , case maybeBlueprint of
                Just blueprint ->
                    Blueprint.saveToLocalStorage blueprint

                Nothing ->
                    Blueprint.removeFromLocalStorage blueprintId
            )

        overwriteExpected maybeBlueprint session =
            ( { session | blueprints = RemoteCache.withExpectedValue blueprintId maybeBlueprint session.blueprints }
            , case maybeBlueprint of
                Just blueprint ->
                    Blueprint.saveRemoteToLocalStorage blueprint

                Nothing ->
                    Blueprint.removeRemoteFromLocalStorage blueprintId
            )

        functions =
            case ( maybeLocalBlueprint, maybeExpectedBlueprint, maybeActualBlueprint ) of
                ( Just (Just localBlueprint), Just (Just expectedBlueprint), Just actualBlueprint ) ->
                    if localBlueprint == expectedBlueprint then
                        [ overwriteLocal maybeActualBlueprint, overwriteExpected maybeActualBlueprint ]

                    else if localBlueprint == actualBlueprint then
                        [ overwriteExpected maybeActualBlueprint ]

                    else if expectedBlueprint == actualBlueprint then
                        []

                    else
                        Debug.todo "1 2 3"

                ( Just (Just localBlueprint), Just (Just expectedBlueprint), Nothing ) ->
                    if localBlueprint == expectedBlueprint then
                        [ overwriteLocal Nothing, overwriteExpected Nothing ]

                    else
                        Debug.todo "1 2 0"

                ( Just (Just localBlueprint), Just Nothing, Just actualBlueprint ) ->
                    if localBlueprint == actualBlueprint then
                        [ overwriteExpected maybeActualBlueprint ]

                    else
                        Debug.todo "1 0 2"

                ( Just (Just localBlueprint), Nothing, Just actualBlueprint ) ->
                    if localBlueprint == actualBlueprint then
                        [ overwriteExpected maybeActualBlueprint ]

                    else
                        Debug.todo "1 ? 2"

                ( Just (Just localBlueprint), Nothing, Nothing ) ->
                    Debug.todo "1 ? 0"

                ( Just Nothing, Just (Just expectedBlueprint), Just actualBlueprint ) ->
                    if expectedBlueprint == actualBlueprint then
                        Debug.todo "0 1 1"

                    else
                        Debug.todo "0 1 2"

                ( Just Nothing, Just Nothing, Just actualBlueprint ) ->
                    Debug.todo "0 0 1"

                ( Just Nothing, _, Nothing ) ->
                    [ overwriteLocal maybeActualBlueprint, overwriteExpected maybeActualBlueprint ]

                ( Just Nothing, Nothing, _ ) ->
                    [ overwriteLocal maybeActualBlueprint, overwriteExpected maybeActualBlueprint ]

                ( Nothing, _, _ ) ->
                    [ overwriteLocal maybeActualBlueprint, overwriteExpected maybeActualBlueprint ]
    in
    fold functions sessionWithActualBlueprint



-- SAVE


saveBlueprint : Blueprint -> CmdUpdater Session SessionMsg
saveBlueprint blueprint session =
    let
        blueprints =
            RemoteCache.withLocalValue blueprint.id (Just blueprint) session.blueprints

        saveActualBlueprint =
            Session.getAccessToken session
                |> Maybe.map (Blueprint.saveToServer GotSaveBlueprintResponse blueprint)
                |> Maybe.withDefault Cmd.none

        saveLocalBlueprint =
            Blueprint.saveToLocalStorage blueprint
    in
    ( { session | blueprints = blueprints }
    , Cmd.batch
        [ saveLocalBlueprint
        , saveActualBlueprint
        ]
    )


gotSaveBlueprintResponse : Blueprint -> Maybe SaveError -> CmdUpdater Session SessionMsg
gotSaveBlueprintResponse blueprint maybeError session =
    case maybeError of
        Just error ->
            gotSaveError error session

        Nothing ->
            session.blueprints
                |> RemoteCache.withActualValue blueprint.id (Just blueprint)
                |> RemoteCache.withExpectedValue blueprint.id (Just blueprint)
                |> flip Session.withBlueprintCache session
                |> id



-- DELETE


deleteBlueprint : BlueprintId -> CmdUpdater Session SessionMsg
deleteBlueprint blueprintId =
    let
        deleteLocally session =
            Session.withBlu

        removeLocalBlueprintCmd =
            Blueprint.removeFromLocalStorage blueprintId

        removeActualBlueprintCmd =
            VerifiedAccessToken.getValid session.accessToken
                |> Maybe.map (Blueprint.deleteFromServer GotDeleteBlueprintResponse blueprintId)
                |> Maybe.withDefault Cmd.none
    in
    ( { session | blueprints = RemoteCache.withLocalValue blueprintId Nothing session.blueprints }
    , Cmd.batch
        [ removeLocalBlueprintCmd
        , removeActualBlueprintCmd
        ]
    )


gotDeleteBlueprintResponse : BlueprintId -> Maybe SaveError -> CmdUpdater Session SessionMsg
gotDeleteBlueprintResponse blueprintId maybeError session =
    case maybeError of
        Just error ->
            gotSaveError error session

        Nothing ->
            session.blueprints
                |> RemoteCache.withLocalValue blueprintId Nothing
                |> RemoteCache.withExpectedValue blueprintId Nothing
                |> RemoteCache.withActualValue blueprintId Nothing
                |> flip Session.withBlueprintCache session
                |> id
